Certainly! Here's an updated version of the code without using a struct for the Edge representation:

#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <algorithm>
using namespace std;

#define INF INT_MAX

class Dijkstra {
public:
    void runDijkstra(vector<vector<pair<int, int>>>& graph, int source, vector<int>& dist) {
        int V = graph.size();
        dist.assign(V, INF);

        // Priority queue to store vertices and their distance values
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        dist[source] = 0;
        pq.push({0, source}); // Start from the source with distance 0

        while (!pq.empty()) {
            int u = pq.top().second;
            int u_dist = pq.top().first;
            pq.pop();

            // If a shorter path to u is found, update the distance
            if (u_dist <= dist[u]) {
                for (const pair<int, int>& neighbor : graph[u]) {
                    int v = neighbor.first;
                    int weight_uv = neighbor.second;

                    if (dist[u] + weight_uv < dist[v]) {
                        dist[v] = dist[u] + weight_uv;
                        pq.push({dist[v], v});
                    }
                }
            }
        }
    }
};

int main() {
    int V, E; // Number of vertices and edges
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    vector<vector<pair<int, int>>> graph(V);

    cout << "Enter the edges (from to weight) separated by space:" << endl;
    for (int i = 0; i < E; ++i) {
        int from, to, weight;
        cin >> from >> to >> weight;
        graph[from].push_back({to, weight});
    }

    int source; // Source vertex
    cout << "Enter the source vertex: ";
    cin >> source;

    Dijkstra dijkstra;
    vector<int> dist;
    dijkstra.runDijkstra(graph, source, dist);

    // Print the shortest distances from the source to all other vertices
    cout << "Shortest distances from vertex " << source << " to all other vertices:" << endl;
    for (int i = 0; i < V; ++i) {
        if (dist[i] == INF) {
            cout << "Vertex " << i << ": Not reachable" << endl;
        } else {
            cout << "Vertex " << i << ": " << dist[i] << endl;
        }
    }

    return 0;
}
In this version, I've replaced the struct with pair<int, int> to represent edges. The code structure and functionality remain the same.
______________________________________________________________________
Enter the number of vertices and edges: 5 7
Enter the edges (from to weight) separated by space:
0 1 2
0 2 4
1 2 1
1 3 3
2 3 5
2 4 6
3 4 8
Enter the source vertex: 0
____
Shortest distances from vertex 0 to all other vertices:
Vertex 0: 0
Vertex 1: 2
Vertex 2: 4
Vertex 3: 5
Vertex 4: 13
