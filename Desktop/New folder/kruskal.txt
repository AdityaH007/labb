#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Define an edge structure to represent edges in the graph
struct Edge {
    int from, to, weight;
};

// Comparator for sorting edges based on weight
struct Compare {
    bool operator()(const Edge& a, const Edge& b) {
        return a.weight < b.weight;
    }
};

class UnionFind {
private:
    vector<int> parent, rank;

public:
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
    }

    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // Path compression
        }
        return parent[x];
    }

    void unionSets(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX != rootY) {
            if (rank[rootX] < rank[rootY]) {
                swap(rootX, rootY);
            }
            parent[rootY] = rootX;
            if (rank[rootX] == rank[rootY]) {
                rank[rootX]++;
            }
        }
    }
};

void kruskalMST(vector<Edge>& edges, int V) {
    sort(edges.begin(), edges.end(), Compare());

    UnionFind uf(V);

    cout << "Edges in the Minimum Spanning Tree:" << endl;
    for (const Edge& edge : edges) {
        int rootX = uf.find(edge.from);
        int rootY = uf.find(edge.to);

        if (rootX != rootY) {
            cout << "Edge: " << edge.from << " - " << edge.to << " Weight: " << edge.weight << endl;
            uf.unionSets(rootX, rootY);
        }
    }
}

int main() {
    int V, E; // Number of vertices and edges
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    vector<Edge> edges(E);

    cout << "Enter the edges (from to weight) separated by space:" << endl;
    for (int i = 0; i < E; ++i) {
        cin >> edges[i].from >> edges[i].to >> edges[i].weight;
    }

    kruskalMST(edges, V);

    return 0;
}
________________________
Enter the number of vertices and edges: 5 7
Enter the edges (from to weight) separated by space:
0 1 2
0 2 4
1 2 1
1 3 3
2 3 5
2 4 6
3 4 8
______
Edges in the Minimum Spanning Tree:
Edge: 1 - 2 Weight: 1
Edge: 0 - 1 Weight: 2
Edge: 3 - 4 Weight: 8
Edge: 2 - 3 Weight: 5

