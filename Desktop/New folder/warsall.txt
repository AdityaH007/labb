#include <bits/stdc++.h>
using namespace std;

#define INF INT_MAX

void printMatrix(vector<vector<int>>& dist, int V) {
    cout << "Shortest Distances between all pairs of vertices:" << endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                cout << "INF ";
            else
                cout << dist[i][j] << " ";
        }
        cout << endl;
    }
}

void floydWarshall(int V, vector<vector<int>>& graph) {
    vector<vector<int>> dist(graph); // Copy the input graph to dist

    // Main algorithm for finding shortest paths
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                // If vertex k is on the shortest path from i to j, update the distance
                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    printMatrix(dist, V);
}

int main() {
    int V, E; // Number of vertices and edges
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    // Initialize the graph with INF as the initial distances
    vector<vector<int>> graph(V, vector<int>(V, INF));

    cout << "Enter the edges (u v w) separated by space, where u and v are vertices and w is the weight:" << endl;
    for (int i = 0; i < E; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        // Assuming the graph is directed, update the weight of the edge (u, v)
        graph[u][v] = w;
    }

    // Call the Floyd-Warshall algorithm
    floydWarshall(V, graph);

    return 0;
}
____________
Enter the number of vertices and edges: 4 5
Enter the edges (u v w) separated by space, where u and v are vertices and w is the weight:
0 1 2
1 2 3
2 3 1
3 0 4
1 3 5
